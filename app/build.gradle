apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

println 'app的build.gradle'

android {
    compileSdkVersion 31
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.zwwl.kotlintest"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
    viewBinding {
        enabled true
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // 这个库会自动依赖 kotlin-stdlib 相关库
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.6.10"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    // 这个库会依赖 core 相关的库
    implementation 'androidx.core:core-ktx:1.7.0'//如果kotlin扩展库升级到1.7.0找不到 android:attr/lStar ，升级 compileSdkVersion 到31
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.alibaba:fastjson:1.2.69'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'

    //这2个库会自动依赖 kotlinx-coroutines-android(core-jvm):1.3.0
    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'

    //这2个库会自动依赖 kotlinx-coroutines-android(core-jvm):1.6.1
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.5.1'

    implementation 'com.google.android.exoplayer:exoplayer:2.14.2'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.leanback:leanback:1.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

//    implementation 'com.zwwl.bindinterface:bindinterface-annotation:2.0.0-SNAPSHOT'
//    implementation 'com.lelink:lelink:2.0.1@aar'
//    implementation 'com.alibaba:aplipay-sdk:15.8.03@aar'
//    implementation 'com.rich3:oauth:4.0.5@aar'

    // flow
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1"
//    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.1"
//    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.5.1'
//    implementation "androidx.activity:activity-ktx:1.6.0"
//    implementation "androidx.fragment:fragment-ktx:1.5.3"

    // paging3
    implementation 'androidx.paging:paging-runtime:3.1.1'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'

}

task task2 (){
    println 'task2的配置阶段'
    doFirst {
        println 'task2的doFirst'
    }
    doLast {
        println 'task2的doLast'
    }
}

task task1 (dependsOn: task2){
    println 'task1的配置阶段'
    doFirst {
        println 'task1的doFirst'
    }
    doLast {
        println 'task1的doLast'
    }
}






